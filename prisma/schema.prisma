generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accountant {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  company_id String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id                              String                            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description                     String?                           @db.VarChar(255)
  image                           String?                           @db.VarChar(255)
  name                            String                            @db.VarChar(255)
  created_at                      DateTime                          @default(now()) @db.Timestamp(6)
  updated_at                      DateTime                          @default(now()) @db.Timestamp(6)
  user_id                         String                            @db.Uuid
  tenant_id                       String                            @db.VarChar(255)
  accountant                      accountant[]
  user                            user                              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer_service_representative customer_service_representative[]
  end_customer                    end_customer[]
  team_member                     team_member[]
}

model customer_service_representative {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  company_id String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model end_customer {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  company_id String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team_member {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  company_id String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String                            @unique @db.VarChar(255)
  firstName                       String?                           @db.VarChar(255)
  lastName                        String?                           @db.VarChar(255)
  roq_user_id                     String                            @db.VarChar(255)
  tenant_id                       String                            @db.VarChar(255)
  created_at                      DateTime                          @default(now()) @db.Timestamp(6)
  updated_at                      DateTime                          @default(now()) @db.Timestamp(6)
  accountant                      accountant[]
  company                         company[]
  customer_service_representative customer_service_representative[]
  end_customer                    end_customer[]
  team_member                     team_member[]
}
